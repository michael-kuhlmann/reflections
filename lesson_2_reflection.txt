Reflection on Lesson 2:

What I learned:
- ls -a to show hidden files (beginning with a .), too
- "git init" to change a normal directory into a git repository
- "git status" to show the status of the repository (most recent commit, tracked files)

Question 1: What happens when you initialize a repository? Why do you need to do it?
Reflection: When you initialize a repository Git will create a .git file where it will save the history for all the files in the repository to keep track of them and allow version control to work.

What I learned: 
- Git has a staging area between working directory and repository so you can decide what to commit
- You can add files with "git add" to the staging area to keep track of them
- "git reset" to remove tracked files from the staging area

Question 2: How is the staging area different from the working directory and the repository? What value do you think it offers?
Reflection: You can not see the files in the staging area physically. It is a virtual space that contains files you want to track. You have the chance to decide which files should be in the staging area: When you create a file in your working directory it will be in it and when you do a commit all files that should be tracked are saved in the repository. So the staging area allows you to control the files that should be keep track of.

What I learned: 
- "git diff" to compare working directory and staging area
- "git diff --staged" to compare staging area and most recent commit in the repository
- "git diff commit1 commit2" to compare to commits in the repository
- "git commit" to add the staging area to the repository as a commit
- "git reset --hard" to remove all changes in the working direcory

Question 3: How can you use the staging area to make sure you have one commit per logical change?
Reflection: You can compare the files in your working directory and the staging area to see what changes will be added as to commits to the repository. So if only one commit per logical change should be made you only add the files with the matching change to the staging area and then commit.

What I learned: 
- "git branch" to see all the existing branches in the repository
- "git brachn <name>" to create a new branch
- The current branch is marked with an *
- "git checkout <branchname>" to change the current branch

Question 4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Reflection: 
- Situations:
	- New experimental feature
	- Same version in another language
	- A new version with slightly differences but still the same functions
The branches are used to have different versions quickly accessable. These versions are desired to be separated because they do not represent an update of the current version but a new version that should be worked on next to the original version.

What I learned:
- "git checkout -b <new_branch_name>" to create a new branch at current commit and change into it
- "git log --graph --oneline <branch1> <branch2>" to visualize what commits do branch1 and branch2 have in common and where they differ
- Reachability: Each commit c has a parent which is the commit that is checked out when c gets commited

Question 5: How do the diagrams help you visualize the branch structure?
Reflection: The diagrams show where the branches are still in common and where they first branch. Moreover, they show which commits belong to which branch. With this you can easily construct the branch structure

What I learned:
- "git merge <branch1> <branch2>" to merge two branches: Merge creates a new commit in the checked out branch
- "git show <commit_id>" to show the differences that were introduced in the commit with <commit_id> compared to its parent
-"git branch -d <branch>" to delete <branch>

Question 6: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Reflection: The result of merging two branches together is a commit in the checked out branch that has the updates of both branches. Since merging combines two branches the merged commit has references to both branches, i.e. two parents. 